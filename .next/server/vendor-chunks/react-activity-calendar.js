"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-activity-calendar";
exports.ids = ["vendor-chunks/react-activity-calendar"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-activity-calendar/build/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-activity-calendar/build/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.js\");\nvar jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst NAMESPACE = \"react-activity-calendar\";\nconst LABEL_MARGIN = 8; // px\nconst DEFAULT_MONTH_LABELS = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nconst DEFAULT_LABELS = {\n    months: DEFAULT_MONTH_LABELS,\n    weekdays: [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ],\n    totalCount: \"{{count}} activities in {{year}}\",\n    legend: {\n        less: \"Less\",\n        more: \"More\"\n    }\n};\nfunction useColorScheme() {\n    const [colorScheme, setColorScheme] = react.useState(\"light\");\n    const onChange = (event)=>{\n        setColorScheme(event.matches ? \"dark\" : \"light\");\n    };\n    react.useEffect(()=>{\n        const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        setColorScheme(mediaQuery.matches ? \"dark\" : \"light\");\n        mediaQuery.addEventListener(\"change\", onChange);\n        return ()=>{\n            mediaQuery.removeEventListener(\"change\", onChange);\n        };\n    }, []);\n    return colorScheme;\n}\nconst loadingAnimationName = `${NAMESPACE}--loading-animation`;\nfunction useLoadingAnimation(zeroColor, colorScheme) {\n    react.useEffect(()=>{\n        const colorLoading = `oklab(from ${zeroColor} l a b)`;\n        const colorActive = colorScheme === \"light\" ? `oklab(from ${zeroColor} calc(l * 0.96) a b)` : `oklab(from ${zeroColor} calc(l * 1.08) a b)`;\n        const style = document.createElement(\"style\");\n        style.innerHTML = `\n      @keyframes ${loadingAnimationName} {\n        0% {\n          fill: ${colorLoading};\n        }\n        50% {\n          fill: ${colorActive};\n        }\n        100% {\n          fill: ${colorLoading};\n        }\n      }\n    `;\n        document.head.appendChild(style);\n        return ()=>{\n            document.head.removeChild(style);\n        };\n    }, [\n        zeroColor,\n        colorScheme\n    ]);\n}\nconst query = \"(prefers-reduced-motion: reduce)\";\nfunction usePrefersReducedMotion() {\n    const [prefersReducedMotion, setPrefersReducedMotion] = react.useState(true);\n    react.useEffect(()=>{\n        const mediaQuery = window.matchMedia(query);\n        setPrefersReducedMotion(mediaQuery.matches);\n        const onChange = (event)=>{\n            setPrefersReducedMotion(event.matches);\n        };\n        mediaQuery.addEventListener(\"change\", onChange);\n        return ()=>{\n            mediaQuery.removeEventListener(\"change\", onChange);\n        };\n    }, []);\n    return prefersReducedMotion;\n}\nfunction validateActivities(activities, maxLevel) {\n    if (activities.length === 0) {\n        throw new Error(\"Activity data must not be empty.\");\n    }\n    for (const { date, level, count } of activities){\n        if (!dateFns.isValid(dateFns.parseISO(date))) {\n            throw new Error(`Activity date '${date}' is not a valid ISO 8601 date string.`);\n        }\n        if (count < 0) {\n            throw new RangeError(`Activity count must not be negative, found ${count}.`);\n        }\n        if (level < 0 || level > maxLevel) {\n            throw new RangeError(`Activity level ${level} for ${date} is out of range. It must be between 0 and ${maxLevel}.`);\n        }\n    }\n}\nfunction groupByWeeks(activities, weekStart = 0 // 0 = Sunday\n) {\n    const normalizedActivities = fillHoles(activities);\n    // Determine the first date of the calendar. If the first date is not the\n    // passed weekday, the respective weekday one week earlier is used.\n    const firstActivity = normalizedActivities[0];\n    const firstDate = dateFns.parseISO(firstActivity.date);\n    const firstCalendarDate = dateFns.getDay(firstDate) === weekStart ? firstDate : dateFns.subWeeks(dateFns.nextDay(firstDate, weekStart), 1);\n    // To correctly group activities by week, it is necessary to left-pad the list\n    // because the first date might not be set start weekday.\n    const paddedActivities = [\n        ...Array(dateFns.differenceInCalendarDays(firstDate, firstCalendarDate)).fill(undefined),\n        ...normalizedActivities\n    ];\n    const numberOfWeeks = Math.ceil(paddedActivities.length / 7);\n    // Finally, group activities by week\n    return range(numberOfWeeks).map((weekIndex)=>paddedActivities.slice(weekIndex * 7, weekIndex * 7 + 7));\n}\n/**\n * The calendar expects a continuous sequence of days,\n * so fill gaps with empty activity data.\n */ function fillHoles(activities) {\n    const calendar = new Map(activities.map((a)=>[\n            a.date,\n            a\n        ]));\n    const firstActivity = activities[0];\n    const lastActivity = activities[activities.length - 1];\n    return dateFns.eachDayOfInterval({\n        start: dateFns.parseISO(firstActivity.date),\n        end: dateFns.parseISO(lastActivity.date)\n    }).map((day)=>{\n        const date = dateFns.formatISO(day, {\n            representation: \"date\"\n        });\n        if (calendar.has(date)) {\n            return calendar.get(date);\n        }\n        return {\n            date,\n            count: 0,\n            level: 0\n        };\n    });\n}\nfunction getClassName(name) {\n    return `${NAMESPACE}__${name}`;\n}\nfunction generateEmptyData() {\n    const year = new Date().getFullYear();\n    const days = dateFns.eachDayOfInterval({\n        start: new Date(year, 0, 1),\n        end: new Date(year, 11, 31)\n    });\n    return days.map((date)=>({\n            date: dateFns.formatISO(date, {\n                representation: \"date\"\n            }),\n            count: 0,\n            level: 0\n        }));\n}\nfunction range(n) {\n    return [\n        ...Array(n).keys()\n    ];\n}\nfunction getMonthLabels(weeks, monthNames = DEFAULT_MONTH_LABELS) {\n    return weeks.reduce((labels, week, weekIndex)=>{\n        const firstActivity = week.find((activity)=>activity !== undefined);\n        if (!firstActivity) {\n            throw new Error(`Unexpected error: Week ${weekIndex + 1} is empty.`);\n        }\n        const month = monthNames[dateFns.getMonth(dateFns.parseISO(firstActivity.date))];\n        if (!month) {\n            const monthName = new Date(firstActivity.date).toLocaleString(\"en-US\", {\n                month: \"short\"\n            });\n            throw new Error(`Unexpected error: undefined month label for ${monthName}.`);\n        }\n        const prevLabel = labels[labels.length - 1];\n        if (weekIndex === 0 || !prevLabel || prevLabel.label !== month) {\n            return [\n                ...labels,\n                {\n                    weekIndex,\n                    label: month\n                }\n            ];\n        }\n        return labels;\n    }, []).filter(({ weekIndex }, index, labels)=>{\n        // Labels should only be shown if there is \"enough\" space (data).\n        // This is a naive implementation that does not take the block size,\n        // font size, etc. into account.\n        const minWeeks = 3;\n        // Skip the first month label if there is not enough space to the next one.\n        if (index === 0) {\n            return labels[1] && labels[1].weekIndex - weekIndex >= minWeeks;\n        }\n        // Skip the last month label if there is not enough data in that month\n        // to avoid overflowing the calendar on the right.\n        if (index === labels.length - 1) {\n            return weeks.slice(weekIndex).length >= minWeeks;\n        }\n        return true;\n    });\n}\nfunction maxWeekdayLabelWidth(labels, showWeekdayLabel, fontSize) {\n    if (labels.length !== 7) {\n        throw new Error(\"Exactly 7 labels, one for each weekday must be passed.\");\n    }\n    return labels.reduce((maxWidth, label, index)=>showWeekdayLabel.byDayIndex(index) ? Math.max(maxWidth, Math.ceil(calcTextDimensions(label, fontSize).width)) : maxWidth, 0);\n}\nfunction calcTextDimensions(text, fontSize) {\n    if (typeof document === \"undefined\" || \"undefined\" === \"undefined\") {\n        return {\n            width: 0,\n            height: 0\n        };\n    }\n    if (fontSize < 1) {\n        throw new RangeError(\"fontSize must be positive\");\n    }\n    if (text.length === 0) {\n        return {\n            width: 0,\n            height: 0\n        };\n    }\n    const namespace = \"http://www.w3.org/2000/svg\";\n    const svg = document.createElementNS(namespace, \"svg\");\n    svg.style.position = \"absolute\";\n    svg.style.visibility = \"hidden\";\n    svg.style.fontFamily = window.getComputedStyle(document.body).fontFamily;\n    svg.style.fontSize = `${fontSize}px`;\n    const textNode = document.createElementNS(namespace, \"text\");\n    textNode.textContent = text;\n    svg.appendChild(textNode);\n    document.body.appendChild(svg);\n    const boundingBox = textNode.getBBox();\n    document.body.removeChild(svg);\n    return {\n        width: boundingBox.width,\n        height: boundingBox.height\n    };\n}\nfunction initWeekdayLabels(input, weekStart) {\n    if (!input) return {\n        byDayIndex: ()=>false,\n        shouldShow: false\n    };\n    // Default: Show every second day of the week.\n    if (input === true) {\n        return {\n            byDayIndex: (index)=>{\n                return (7 + index - weekStart) % 7 % 2 !== 0;\n            },\n            shouldShow: true\n        };\n    }\n    const indexed = [];\n    for (const name of input){\n        const index = dayNameToIndex[name.toLowerCase()];\n        indexed[index] = true;\n    }\n    return {\n        byDayIndex: (index)=>indexed[index] ?? false,\n        shouldShow: input.length > 0\n    };\n}\nconst dayNameToIndex = {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n};\nfunction createTheme(input, steps = 5) {\n    const defaultTheme = createDefaultTheme(steps);\n    if (input) {\n        validateInput(input, steps);\n        input.light = input.light ?? defaultTheme.light;\n        input.dark = input.dark ?? defaultTheme.dark;\n        return {\n            light: isPair(input.light) ? calcColorScale(input.light, steps) : input.light,\n            dark: isPair(input.dark) ? calcColorScale(input.dark, steps) : input.dark\n        };\n    }\n    return defaultTheme;\n}\nfunction createDefaultTheme(steps) {\n    return {\n        light: calcColorScale([\n            \"hsl(0, 0%, 92%)\",\n            \"hsl(0, 0%, 26%)\"\n        ], steps),\n        dark: calcColorScale([\n            \"hsl(0, 0%, 22%)\",\n            \"hsl(0, 0%, 92%)\"\n        ], steps)\n    };\n}\nfunction validateInput(input, steps) {\n    if (typeof input !== \"object\" || input.light === undefined && input.dark === undefined) {\n        throw new Error(`The theme object must contain at least one of the fields \"light\" and \"dark\" with exactly 2 or ${steps} colors respectively.`);\n    }\n    if (input.light) {\n        const { length } = input.light;\n        if (length !== 2 && length !== steps) {\n            throw new Error(`theme.light must contain exactly 2 or ${steps} colors, ${length} passed.`);\n        }\n        for (const c of input.light){\n            if (false) {}\n        }\n    }\n    if (input.dark) {\n        const { length } = input.dark;\n        if (length !== 2 && length !== steps) {\n            throw new Error(`theme.dark must contain exactly 2 or ${steps} colors, ${length} passed.`);\n        }\n        for (const c of input.dark){\n            if (false) {}\n        }\n    }\n}\nfunction calcColorScale([start, end], steps) {\n    return range(steps).map((i)=>{\n        // In the loading animation the zero color is used.\n        // However, Safari 16 crashes if a CSS color-mix expression like below is\n        // combined with relative color syntax to calculate a hue variation for the\n        // animation. Since the start and end colors do not need to be mixed, they\n        // can be returned directly to work around this issue.\n        switch(i){\n            case 0:\n                return start;\n            case steps - 1:\n                return end;\n            default:\n                {\n                    const pos = i / (steps - 1) * 100;\n                    return `color-mix(in oklab, ${end} ${parseFloat(pos.toFixed(2))}%, ${start})`;\n                }\n        }\n    });\n}\nfunction isPair(val) {\n    return val.length === 2;\n}\nconst styles = {\n    container: (fontSize)=>({\n            width: \"max-content\",\n            // Calendar should not grow\n            maxWidth: \"100%\",\n            // Do not remove - parent might be a flexbox\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"8px\",\n            fontSize: `${fontSize}px`\n        }),\n    scrollContainer: (fontSize)=>({\n            maxWidth: \"100%\",\n            overflowX: \"auto\",\n            overflowY: \"hidden\",\n            paddingTop: Math.ceil(0.1 * fontSize) // SVG <text> overflows in Firefox at y=0\n        }),\n    calendar: {\n        display: \"block\",\n        // SVGs are inline-block by default\n        overflow: \"visible\" // Weekday labels are rendered left of the container\n    },\n    rect: (colorScheme)=>({\n            stroke: colorScheme === \"light\" ? \"rgba(0, 0, 0, 0.08)\" : \"rgba(255, 255, 255, 0.04)\"\n        }),\n    footer: {\n        container: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            gap: \"4px 16px\",\n            whiteSpace: \"nowrap\"\n        },\n        legend: {\n            marginLeft: \"auto\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"3px\"\n        }\n    }\n};\nconst ActivityCalendar = /*#__PURE__*/ react.forwardRef(({ data: activities, blockMargin = 4, blockRadius = 2, blockSize = 12, colorScheme: colorSchemeProp = undefined, eventHandlers = {}, fontSize = 14, hideColorLegend = false, hideMonthLabels = false, hideTotalCount = false, labels: labelsProp = undefined, maxLevel = 4, loading = false, renderBlock = undefined, renderColorLegend = undefined, showWeekdayLabels = false, style: styleProp = {}, theme: themeProp = undefined, totalCount: totalCountProp = undefined, weekStart = 0 // Sunday\n }, // Required for react-docgen\nref)=>{\n    const [isClient, setIsClient] = react.useState(false);\n    react.useEffect(()=>{\n        setIsClient(true);\n    }, []);\n    maxLevel = Math.max(1, maxLevel);\n    const theme = createTheme(themeProp, maxLevel + 1);\n    const systemColorScheme = useColorScheme();\n    const colorScheme = colorSchemeProp ?? systemColorScheme;\n    const colorScale = theme[colorScheme];\n    useLoadingAnimation(colorScale[0], colorScheme);\n    const useAnimation = !usePrefersReducedMotion();\n    if (loading) {\n        activities = generateEmptyData();\n    }\n    validateActivities(activities, maxLevel);\n    const firstActivity = activities[0];\n    const year = dateFns.getYear(dateFns.parseISO(firstActivity.date));\n    const weeks = groupByWeeks(activities, weekStart);\n    const labels = Object.assign({}, DEFAULT_LABELS, labelsProp);\n    const labelHeight = hideMonthLabels ? 0 : fontSize + LABEL_MARGIN;\n    const weekdayLabels = initWeekdayLabels(showWeekdayLabels, weekStart);\n    // Must be calculated on the client or SSR hydration errors will occur\n    // because server and client HTML would not match.\n    const weekdayLabelOffset = isClient && weekdayLabels.shouldShow ? maxWeekdayLabelWidth(labels.weekdays, weekdayLabels, fontSize) + LABEL_MARGIN : undefined;\n    function getDimensions() {\n        return {\n            width: weeks.length * (blockSize + blockMargin) - blockMargin,\n            height: labelHeight + (blockSize + blockMargin) * 7 - blockMargin\n        };\n    }\n    function getEventHandlers(activity) {\n        return Object.keys(eventHandlers).reduce((handlers, key)=>({\n                ...handlers,\n                [key]: (event)=>eventHandlers[key]?.(event)(activity)\n            }), {});\n    }\n    function renderCalendar() {\n        return weeks.map((week, weekIndex)=>week.map((activity, dayIndex)=>{\n                if (!activity) {\n                    return null;\n                }\n                const loadingAnimation = loading && useAnimation ? {\n                    animation: `${loadingAnimationName} 1.75s ease-in-out infinite`,\n                    animationDelay: `${weekIndex * 20 + dayIndex * 20}ms`\n                } : undefined;\n                const block = /*#__PURE__*/ jsxRuntime.jsx(\"rect\", {\n                    ...getEventHandlers(activity),\n                    x: 0,\n                    y: labelHeight + (blockSize + blockMargin) * dayIndex,\n                    width: blockSize,\n                    height: blockSize,\n                    rx: blockRadius,\n                    ry: blockRadius,\n                    fill: colorScale[activity.level],\n                    \"data-date\": activity.date,\n                    \"data-level\": activity.level,\n                    style: {\n                        ...styles.rect(colorScheme),\n                        ...loadingAnimation\n                    }\n                });\n                return /*#__PURE__*/ jsxRuntime.jsx(react.Fragment, {\n                    children: renderBlock ? renderBlock(block, activity) : block\n                }, activity.date);\n            })).map((week, x)=>/*#__PURE__*/ jsxRuntime.jsx(\"g\", {\n                transform: `translate(${(blockSize + blockMargin) * x}, 0)`,\n                children: week\n            }, x));\n    }\n    function renderFooter() {\n        if (hideTotalCount && hideColorLegend) {\n            return null;\n        }\n        const totalCount = typeof totalCountProp === \"number\" ? totalCountProp : activities.reduce((sum, activity)=>sum + activity.count, 0);\n        return /*#__PURE__*/ jsxRuntime.jsxs(\"footer\", {\n            className: getClassName(\"footer\"),\n            style: {\n                ...styles.footer.container,\n                marginLeft: weekdayLabelOffset\n            },\n            children: [\n                loading && /*#__PURE__*/ jsxRuntime.jsx(\"div\", {\n                    children: \"\\xa0\"\n                }),\n                !loading && !hideTotalCount && /*#__PURE__*/ jsxRuntime.jsx(\"div\", {\n                    className: getClassName(\"count\"),\n                    children: labels.totalCount ? labels.totalCount.replace(\"{{count}}\", String(totalCount)).replace(\"{{year}}\", String(year)) : `${totalCount} activities in ${year}`\n                }),\n                !loading && !hideColorLegend && /*#__PURE__*/ jsxRuntime.jsxs(\"div\", {\n                    className: getClassName(\"legend-colors\"),\n                    style: styles.footer.legend,\n                    children: [\n                        /*#__PURE__*/ jsxRuntime.jsx(\"span\", {\n                            style: {\n                                marginRight: \"0.4em\"\n                            },\n                            children: labels.legend.less\n                        }),\n                        range(maxLevel + 1).map((level)=>{\n                            const block = /*#__PURE__*/ jsxRuntime.jsx(\"svg\", {\n                                width: blockSize,\n                                height: blockSize,\n                                children: /*#__PURE__*/ jsxRuntime.jsx(\"rect\", {\n                                    width: blockSize,\n                                    height: blockSize,\n                                    fill: colorScale[level],\n                                    rx: blockRadius,\n                                    ry: blockRadius,\n                                    style: styles.rect(colorScheme)\n                                })\n                            }, level);\n                            return renderColorLegend ? renderColorLegend(block, level) : block;\n                        }),\n                        /*#__PURE__*/ jsxRuntime.jsx(\"span\", {\n                            style: {\n                                marginLeft: \"0.4em\"\n                            },\n                            children: labels.legend.more\n                        })\n                    ]\n                })\n            ]\n        });\n    }\n    function renderWeekdayLabels() {\n        if (!weekdayLabels.shouldShow) {\n            return null;\n        }\n        return /*#__PURE__*/ jsxRuntime.jsx(\"g\", {\n            className: getClassName(\"legend-weekday\"),\n            children: range(7).map((index)=>{\n                const dayIndex = (index + weekStart) % 7;\n                if (!weekdayLabels.byDayIndex(dayIndex)) {\n                    return null;\n                }\n                return /*#__PURE__*/ jsxRuntime.jsx(\"text\", {\n                    x: -8,\n                    y: labelHeight + (blockSize + blockMargin) * index + blockSize / 2,\n                    dominantBaseline: \"central\",\n                    textAnchor: \"end\",\n                    fill: \"currentColor\",\n                    children: labels.weekdays[dayIndex]\n                }, index);\n            })\n        });\n    }\n    function renderMonthLabels() {\n        if (hideMonthLabels) {\n            return null;\n        }\n        return /*#__PURE__*/ jsxRuntime.jsx(\"g\", {\n            className: getClassName(\"legend-month\"),\n            children: getMonthLabels(weeks, labels.months).map(({ label, weekIndex })=>/*#__PURE__*/ jsxRuntime.jsx(\"text\", {\n                    x: (blockSize + blockMargin) * weekIndex,\n                    y: 0,\n                    dominantBaseline: \"hanging\",\n                    fill: \"currentColor\",\n                    children: label\n                }, weekIndex))\n        });\n    }\n    const { width, height } = getDimensions();\n    return /*#__PURE__*/ jsxRuntime.jsxs(\"article\", {\n        ref: ref,\n        className: NAMESPACE,\n        style: {\n            ...styleProp,\n            ...styles.container(fontSize)\n        },\n        children: [\n            /*#__PURE__*/ jsxRuntime.jsx(\"div\", {\n                className: getClassName(\"scroll-container\"),\n                style: styles.scrollContainer(fontSize),\n                children: /*#__PURE__*/ jsxRuntime.jsxs(\"svg\", {\n                    width: width,\n                    height: height,\n                    viewBox: `0 0 ${width} ${height}`,\n                    className: getClassName(\"calendar\"),\n                    style: {\n                        ...styles.calendar,\n                        marginLeft: weekdayLabelOffset\n                    },\n                    children: [\n                        !loading && renderWeekdayLabels(),\n                        !loading && renderMonthLabels(),\n                        renderCalendar()\n                    ]\n                })\n            }),\n            renderFooter()\n        ]\n    });\n});\nActivityCalendar.displayName = \"ActivityCalendar\";\nconst Skeleton = (props)=>/*#__PURE__*/ jsxRuntime.jsx(ActivityCalendar, {\n        data: [],\n        ...props\n    });\nexports.ActivityCalendar = ActivityCalendar;\nexports.Skeleton = Skeleton;\nexports[\"default\"] = ActivityCalendar; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-activity-calendar/build/index.js\n");

/***/ })

};
;